// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static array shiftary;

    /** Initializes the library. */
    function void init() {
        let shiftary = Array.new(16);
        let shiftary[0] = 1;
        let shiftary[1] = 2;
        let shiftary[2] = 4;
        let shiftary[3] = 8;
        let shiftary[4] = 16;
        let shiftary[5] = 32;
        let shiftary[6] = 64;
        let shiftary[7] = 128;
        let shiftary[8] = 256;
        let shiftary[9] = 512;
        let shiftary[10] = 1024;
        let shiftary[11] = 2048;
        let shiftary[12] = 4096;
        let shiftary[13] = 8192;
        let shiftary[14] = 16384;
        let shiftary[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
	    if ( x < 0 ) {
            let x = -x;
        }
        return x;
    }

    function boolean bit( int x, int i ) {
        return ~((x & shiftary[i]) = 0 );
    }
    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedx, i;
        let i = 0;
        let sum = 0;
        let shiftedx = x;
        while ( i < 16 ) {
            if ( Math.bit(y,i) ) {
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int negx, negy, q, result;
        let negx = 0;
        let negy = 0;
        if ( x < 0 ) {
            let negx = 1;
        }

        if ( y < 0 ) {
            let negy = 1;
        }

        let x = Math.abs( x );
        let y = Math.abs( y );

        if ( x < y ) {
            return 0;
        } 

        let q = Math.divide( x, y+y );
        if ( ( x - (Math.multiply(q+q,y))) < y ) {
            let result = q + q;
        } else {
            let result = q + q + 1;
        }
        
        if ( negx = negy ) {
            return result;
        } else {
            return -result;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, sum;
        let y = 0;
        let j = 7;
        let sum = 0;

        while ( j > -1 ) {
            let sum = y + shiftary[j];
            let sum = Math.multiply( sum, sum );
            if ( ~( sum > x ) & ( sum > 0 ) ) {
                let y = y + shiftary[j];
            }    
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if ( a > b ) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if ( a < b ) {
            return a;
        } else {
            return b;
        }
    }
}
