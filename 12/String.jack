// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field array str;
    field int len;
    field int maxlen;
    
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if ( maxLength = 0 ) {
            let maxLength = 1;
        }

        let str = Array.new(maxLength);
        let len = 0;
        let maxlen = maxLength;

        return  this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(str);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if ( len < maxlen) {
            let str[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if ( len > -1 ) {
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int sum, cnt, neg;
        if ( len > 0 ) {
            let sum = 0;
            let cnt = 0;
            let neg = 0;

            if ( str[0] = 45 ) {
                let neg = 1;
                let cnt = 1;
            } 

            while ( cnt < len ) {
                if ( (str[cnt] > 47) & (str[cnt] < 58) ){
                    let sum = sum*10 + str[cnt] - 48;
                } 
                let cnt = cnt + 1;
            }

        }


        if ( neg = 1 ) {
            return -sum;
        } else {
            return sum;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        if ( val < 0 ) {
            let val = -val;
            do appendChar(45);
        }
        do setintindv(val);
        return;
    }

    method void setintindv(int val) {
        var int div, mod;
        let div = val / 10;
        let mod = val - (div*10); 

        if ( val > 10 ) {
            do setintindv(div);
            do appendChar(mod+48);
        } else {
            do appendChar(mod+48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
