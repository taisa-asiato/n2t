// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int addr;
    static boolean color_bit;

    /** Initializes the Screen. */
    function void init() {
        let addr = 16384;
        let color_bit = false;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int x, y;
        let x = 0;
        let y = 0;
        let color_bit = false;
        do Screen.drawRectangle(0,0,511,255);
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color_bit = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int scrn_addr, pixel_x;
        var int memory_addr;

        if (( x < 0 ) | ( x > 511 ) | ( y < 0 ) | ( y > 255 )) {
            do Sys.error(7);
        }
        let pixel_x = x - (x/16) * 16;
        // アドレス変換はテキスト参照(一行に16bit x 32個並んでいるので)
        let scrn_addr = addr + (32*y) + (pixel_x/16);                

        // 書き込みを行う対象メモリアドレス
        //do Output.printInt(scrn_addr);
        //do Output.println();
        //do Output.printInt(addr);

        //let memory_addr = Memory.peek(scrn_addr);
        do Memory.poke(scrn_addr, color_bit);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int adyminusbdx, a, b, dx, dy, temp;
        let a = 0;
        let b = 0;
        let adyminusbdx = 0;

        if ( x1 > x2 ) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        
        let dx = x2 - x1;
        let dy = y2 - y1;

        if ( dx = 0 | dy = 0 ) {
            // x or y軸と平行な線の場合
            if ( dx = 0 ) {
                let b = y1;
                while ( ~(b > y2) ) {
                    do Screen.drawPixel(x1,b);
                    let b = b + 1;
                }
            } else {
                let a = x1;
                while ( ~(a > x2) ) {
                    do Screen.drawPixel(a, y1);
                    let a = a + 1;
                }
            }
        } else {
            let adyminusbdx = a*dy - b*dx;
            let a = 0;
            let b = 0;
            while ( ~(a > dx) & ~(b > dy) )  {
                do Screen.drawPixel(x1+a,y1+b);
                if ( adyminusbdx < 0 ) {
                    let a = a + 1;
                    let adyminusbdx = adyminusbdx + dy;
                } else {
                    let b = b + 1;
                    let adyminusbdx = adyminusbdx - dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i, j;
        let i = x1;
        let j = y1;

        while ( ~(i>x2) ) {
            while ( ~(j>y2) ) {
                do Screen.drawPixel(i, j);
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int dx;
        let dy = -r;

        while ( ~(dy>r) ) {
            let dx = Math.sqrt(r*r-dy*dy);
            do Screen.drawLine( x-dx, y+dy, x+dx, y+dy );
            let dy = dy + 1;
        }
        return;
    }
}
