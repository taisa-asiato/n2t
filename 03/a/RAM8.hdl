// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way ( in=true, sel=address, a=adm, b=bdm, c=cdm, d=ddm, e=edm, f=fdm, g=gdm, h=hdm );

    And ( a=adm, b=load, out=loada );
    And ( a=bdm, b=load, out=loadb );
    And ( a=cdm, b=load, out=loadc );
    And ( a=ddm, b=load, out=loadd );
    And ( a=edm, b=load, out=loade );
    And ( a=fdm, b=load, out=loadf );
    And ( a=gdm, b=load, out=loadg );
    And ( a=hdm, b=load, out=loadh );

    Register ( in=in, load=loada, out=outa );
    Register ( in=in, load=loadb, out=outb );
    Register ( in=in, load=loadc, out=outc );
    Register ( in=in, load=loadd, out=outd );
    Register ( in=in, load=loade, out=oute );
    Register ( in=in, load=loadf, out=outf );
    Register ( in=in, load=loadg, out=outg );
    Register ( in=in, load=loadh, out=outh );

    Mux8Way16 ( a=outa, b=outb, c=outc, d=outd, e=oute, f=outf, g=outg, h=outh, sel=address, out=out );
}
