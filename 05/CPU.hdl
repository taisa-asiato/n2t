// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // instructionの各bitを分割する( 分割する必要はない )
    // I
    And ( a=instruction[15], b=instruction[15], out=cnti );
    // X1 and X2 
    And ( a=instruction[14], b=instruction[14], out=cntx1 );
    And ( a=instruction[13], b=instruction[13], out=cntx2 );
    // A
    And ( a=instruction[12], b=cnti, out=cnta );
    // C1~C6 
    And ( a=instruction[11], b=cnti, out=cntc1 );
    And ( a=instruction[10], b=cnti, out=cntc2 );
    And ( a=instruction[9],  b=cnti, out=cntc3 );
    And ( a=instruction[8],  b=cnti, out=cntc4 );
    And ( a=instruction[7],  b=cnti, out=cntc5 );
    And ( a=instruction[6],  b=cnti, out=cntc6 );
    // D1~D3
    And ( a=instruction[5], b=cnti, out=cntd1 );
    And ( a=instruction[4], b=cnti, out=cntd2 );
    And ( a=instruction[3], b=cnti, out=cntd3 );
    // J1~J3
    And ( a=instruction[2], b=cnti, out=cntj1 );
    And ( a=instruction[1], b=cnti, out=cntj2 );
    And ( a=instruction[0], b=cnti, out=cntj3 );


    // outmはoutMと同一
    Mux16 ( a=instruction, b=outm, sel=cnti, out=outm1 );


    Not ( in=cnti, out=cntni );
    Or ( a=cntni, b=cntd1, out=cntd1-1 );
    ARegister ( in=outm1, load=cntd1-1, out=orega, out[0..14]=addressM );
    DRegister ( in=outm,  load=cntd2, out=oregd );
    Mux16 ( a=orega, b=inM, sel=cnta, out=outm2 );

    // 2章の対応表からC1~C6がALUのそれぞれの入力ピンと合致する
    ALU ( x=oregd, y=outm2,
    	  zx=cntc1, nx=cntc2, zy=cntc3, ny=cntc4, f=cntc5, no=cntc6, 
	 out=outm, out=outM );

    Or ( a=cntj1, b=cntj2, out=lcntrl1 );
    Or ( a=lcntrl1, b=cntj3, out=lcntrl2 );
    And ( a=cnti, b=lcntrl2, out=lcntrl3 );
    Not ( in=lcntrl3, out=icntrl );
    // icntrl2 = 0 : No Jump
    // icntrl2 = 1 : Jump
    PC ( in=orega, load=lcntrl3, inc=icntrl, reset=reset, out[0..14]=pc[0..14]  );
    And ( a=cntd3, b=cnti, out=writeM );
}
